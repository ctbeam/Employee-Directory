{"version":3,"sources":["components/Navbar/index.js","components/Employee-Card/index.js","components/Sort-Buttons/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","EmployeeCard","props","src","image","alt","name","firstName","lastName","email","phone","address","number","city","state","country","age","SortButtons","id","onClick","handleClickABC","handleClickZYX","handleClickReset","Jumbotron","employee","original","event","preventDefault","console","log","sortedState","sort","a","b","first","setState","originalArray","handleClickSearch","searchName","document","getElementById","value","arrayToSearch","filteredArray","filter","emp","last","fetch","then","res","json","result","results","this","type","placeholder","length","map","key","login","uuid","location","street","picture","large","dob","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e399798f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction NavBar() {\n  return (\n    <nav className=\"navbar navbar-light\">\n      <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./employeeCard.css\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"col-md-3\">\n      <div className=\"card\">\n        <img src={props.image} className=\"card-img-top\" alt={props.name} />\n        <div className=\"card-body\">\n          <ul>\n            <li>\n              <p>\n                {\" \"}\n                {props.firstName} {props.lastName}\n              </p>\n            </li>\n            <li>\n              <p> {props.email}</p>\n            </li>\n            <li>\n              <p> {props.phone}</p>\n            </li>\n            <li>\n              <p>\n                {\" \"}\n                {props.address.number} {props.address.name}, {props.city},{\" \"}\n                {props.state} {props.country}\n              </p>\n            </li>\n            <li>\n              <p>Age: {props.age}</p>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./sortButtons.css\";\n\nfunction SortButtons(props) {\n  return (\n    <div className=\"row\" id=\"BtnRow\">\n      <button onClick={props.handleClickABC} id=\"sortABC\" className=\"col-sm-4\">\n        Sort A-Z\n      </button>\n      <button onClick={props.handleClickZYX} id=\"sortZYX\" className=\"col-sm-4\">\n        Sort Z-A\n      </button>\n      <button onClick={props.handleClickReset} id=\"reset\" className=\"col-sm-4\">\n        Reset All Filters\n      </button>\n    </div>\n  );\n}\n\nexport default SortButtons;\n","import React, { Component } from \"react\";\nimport \"./Jumbotron.css\";\nimport EmployeeCard from \"../Employee-Card/index\";\nimport SortButtons from \"../Sort-Buttons/index\";\n\nclass Jumbotron extends Component {\n  state = {\n    employee: [],\n    original: [],\n  };\n\n  componentDidMount() {\n    fetch(\"https://randomuser.me/api/?results=20&nat=us\")\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          employee: result.results,\n          original: result.results,\n        });\n      });\n  }\n\n  handleClickABC = (event) => {\n    event.preventDefault();\n    console.log(\"Sort Alphabetically A-Z\");\n    console.log(\"Employee State\", this.state.employee);\n    const arrayToSort = [...this.state.employee];\n    const sortedState = arrayToSort.sort((a, b) =>\n      a.name.first > b.name.first ? 1 : -1\n    );\n    this.setState({\n      employee: sortedState,\n    });\n    console.log(\"original array\", this.state.original);\n  };\n\n  handleClickZYX = (event) => {\n    event.preventDefault();\n    console.log(\"Sort Alphabetically Z-A\");\n    console.log(this.state.employee);\n    const arrayToSort = [...this.state.employee];\n    const sortedState = arrayToSort.sort((a, b) =>\n      a.name.first > b.name.first ? -1 : 1\n    );\n    console.log(sortedState);\n    this.setState({\n      employee: sortedState,\n    });\n  };\n\n  handleClickReset = (event) => {\n    event.preventDefault();\n    const originalArray = [...this.state.original];\n    this.setState({\n      employee: originalArray,\n    });\n  };\n\n  handleClickSearch = (event) => {\n    event.preventDefault();\n    const searchName = document.getElementById(\"search\").value;\n    console.log(searchName);\n    const arrayToSearch = [...this.state.employee];\n    console.log(arrayToSearch);\n    const filteredArray = arrayToSearch.filter(\n      (emp) => emp.name.last === searchName\n    );\n    console.log(filteredArray);\n    this.setState({\n      employee: filteredArray,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Employee Info</h1>\n          <div className=\"row\">\n            <SortButtons\n              handleClickABC={this.handleClickABC}\n              handleClickZYX={this.handleClickZYX}\n              handleClickReset={this.handleClickReset}\n            />\n          </div>\n          <div className=\"row\" id=\"searchRow\">\n            <input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              id=\"search\"\n              className=\"col-sm-8\"\n            ></input>\n            <button\n              type=\"submit\"\n              id=\"searchBtn\"\n              onClick={this.handleClickSearch}\n            >\n              Search by Last Name\n            </button>\n          </div>\n          <div className=\"row\">\n            {this.state.employee.length === 0 ? (\n              <p>There are no profiles to display</p>\n            ) : (\n              this.state.employee.map((employee) => (\n                <EmployeeCard\n                  key={employee.login.uuid}\n                  firstName={employee.name.first}\n                  lastName={employee.name.last}\n                  email={employee.email}\n                  phone={employee.phone}\n                  address={employee.location.street}\n                  image={employee.picture.large}\n                  city={employee.location.city}\n                  country={employee.location.country}\n                  state={employee.location.state}\n                  age={employee.dob.age}\n                />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Jumbotron />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}